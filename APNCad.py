# -*- coding: utf-8 -*-
"""
/***************************************************************************
 APNCad
                                 A QGIS plugin
 Applicatif destiné à la prise de notes sur tablette numérique lors des opérations de terrain réalisées pendant le remaniement cadastral
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-24
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Marius François-Marchal
        email                : m.francois.marchal@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo, QObject, Qt, QVariant
from qgis.PyQt.QtGui import QIcon, QCursor
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QDockWidget, QFileDialog
from qgis.utils import iface
from qgis.gui import QgsMapToolEmitPoint, QgsMapToolPan, QgsRubberBand
from .PointMapTool import PointMapTool
from .PolyLineMapTool import PolylineMapTool
from .PolygonMapTool import PolygonMapTool

# import requests
from PyQt5.QtWidgets import QAction, QToolButton, QMenu, QLineEdit, QPushButton, QComboBox, QToolBar
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QDesktopServices, QMouseEvent, QKeyEvent
from qgis.core import (QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsProject,
                       QgsRectangle,
                       QgsPointXY,
                       QgsGeometry,
                       QgsVectorLayer,
                       QgsFeature,
                       Qgis,
                       QgsMapLayerType,
                       QgsPoint,
                       QgsMapLayer,
                       QgsCircularString,
                       QgsLayerDefinition,
                       QgsWkbTypes,
                       QgsFields,
                       QgsField,
                       QgsVectorFileWriter,
                       QgsLayerTreeLayer,
                       QgsCoordinateTransformContext)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ConfigPoints_dialog import ConfigPointsDialog
from .ListePoint_dialog import ListePointDialog
from .EntrerAttribut_dialog import EntrerAttributDialog
from .ChoisirDebord_dialog import ChoisirDebordDialog
from .ClavierNum_dialog import ClavierNumDialog
from .Crs_dialog import CrsDialog
from .Laserm_dialog import LasermDialog
from .RechercheParc_dialog import RechercheParcDialog
from .SelectFeat_dialog import SelectFeatDialog
from .EditerInfo_dialog import EditerInfoDialog
from .EditerImage_dialog import EditerImageDialog

import os.path
from os import listdir
import time
import math as Maths
import json


class APNCad:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'APNCad_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Liste des couches pour construction / reconstruction projet (nom, type, groupe)
        self.listLayers = [("debordT", "Point", "Symbole"), ("borne", "Point", "Symbole"),
                           ("clotureMit", "Point", "Symbole"), ("murmitoyen", "Ligne", "Symbole"),
                           ("murnonmi", "Ligne", "Symbole"), ("borne_retrouvee", "Point", "Symbole"),
                           ("biffer", "Ligne", "Symbole"), ("MurDroite", "Ligne", "Dessin"),
                           ("Point", "Point", "Dessin"), ("Texte", "Point", "Dessin"),
                           ("TexteOriente", "Ligne", "Dessin"), ("MurMilieu", "Ligne", "Dessin"),
                           ("coteSURLigne", "Ligne", "Dessin"), ("LigneDiscontinue", "Ligne", "Dessin"),
                           ("LigneContinue", "Ligne", "Dessin"), ("cotesansligne", "Ligne", "Dessin"),
                           ("polygone", "Polygone", "Dessin"), ("image", "Point", "Autre"),
                           ("HaieNonMit", "Ligne", "Symbole"), ("Haiemit", "Ligne", "Symbole"),
                           ("Fossenonmit", "Ligne", "Symbole"), ("FosseMit", "Ligne", "Symbole"),
                           ("Cloturenonmit", "Ligne", "Symbole"), ("BornePolygo", "Point", "Symbole"),
                           ("clou", "Point", "Symbole"), ("clouLimite", "Ligne", "Symbole"),
                           ("Coterepere", "Ligne", "Dessin"), ("CroixGravee", "Point", "Symbole"),
                           ("RepereNivel", "Ligne", "Symbole"), ("Das", "Point", "Autre"),
                           ("puit", "Point", "Symbole"), ("PtDetail", "Point", "Symbole"),
                           ("trottoir", "Ligne", "Dessin"), ("information", "Point", "Autre"),
                           ("Numparc", "Point", "CroquisDelim"), ("GrandTexte", "Point", "CroquisDelim"),
                           ("Fiscalite", "Ligne", "CroquisDelim"), ("LimiteCommune", "Ligne", "CroquisDelim"),
                           ("LimiteSection", "Ligne", "CroquisDelim"), ("LimiteLieuDit", "Ligne", "CroquisDelim"),
                           ("FiscaliteTexte", "Point", "CroquisDelim"), ("PetitText", "Point", "CroquisDelim")]

        self.crsDict = {'RGF93 / CC43': 'EPSG:3943', 'RGF93 / CC44': 'EPSG:3944', 'RGF93 / CC45': 'EPSG:3945',
                        'RGF93 / CC46': 'EPSG:3946', 'RGF93 / CC47': 'EPSG:3947', 'RGF93 / CC48': 'EPSG:3948',
                        'RGF93 / CC49': 'EPSG:3949', 'RGF93 / CC50': 'EPSG:3950'}

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # num et incrementation initiaux Points
        self.numPoint = 0
        self.increment = 1

        # num et incrementation initiaux Num Parcelle
        self.numParc = 1
        self.incParc = 1

        # Parametres polyligne
        # attribut sur le segment
        self.attribute = True

        # liste contenant coord points pour cote courbe, translation
        self.pointList = []

        # Variable bool copy for translation
        self.copy = True

        # Liste contenant les plus proches objets
        self.layerData = []

        # Nombre de points pour la polyligne (infini=100)
        self.nb_pts_poly = 100

        # Camera path to save
        self.save_path_image = ""
        self.captured_image_path = ""

        # Outils
        self.canvas = self.iface.mapCanvas()

        # Outils de dessin
        # Tracer point
        self.pointTool = PointMapTool(self.canvas)
        self.pointTool.snapClicked.connect(self.display_point)

        # Tracer num parc
        self.numParcTool = PointMapTool(self.canvas)
        self.numParcTool.snapClicked.connect(self.display_numParc)

        # Pan (main)
        self.toolPan = QgsMapToolPan(self.canvas)

        # modif attribut
        self.editAttributeTool = QgsMapToolEmitPoint(self.canvas)
        self.editAttributeTool.canvasClicked.connect(self.edit_attribute)

        # delete point
        self.deleteTool = QgsMapToolEmitPoint(self.canvas)
        self.deleteTool.canvasClicked.connect(self.delete_object)

        # tracer debord
        self.debordTool = PointMapTool(self.canvas)
        self.debordTool.snapClicked.connect(self.display_debord)

        # identifier couche
        self.identifyTool = QgsMapToolEmitPoint(self.canvas)
        self.identifyTool.canvasClicked.connect(self.identify_layer)

        # freeze couche
        self.freezeTool = QgsMapToolEmitPoint(self.canvas)
        self.freezeTool.canvasClicked.connect(self.freeze_layer)

        # copier et translater feature
        self.copyTool = QgsMapToolEmitPoint(self.canvas)
        self.copyTool.canvasClicked.connect(self.translate_copy_feature)

        # declencher action
        self.actionTool = QgsMapToolEmitPoint(self.canvas)
        self.actionTool.canvasClicked.connect(self.trigger_action)

        # tracer arc (3 pts)
        self.arcTool = PointMapTool(self.canvas)
        self.arcTool.snapClicked.connect(self.display_cote_courbe)

        # tracer polyligne
        self.polyligneTool = PolylineMapTool(self.canvas)
        self.polyligneTool.polylineFinished.connect(self.apply_new_attribute)
        # self.polyligneTool.snapClicked.connect(self.add_point)

        # tracer polygon
        self.polygonTool = PolygonMapTool(self.canvas)
        self.polygonTool.polygonFinished.connect(self.apply_new_attribute)

        # tracer entite ponctuelle (1 pt)
        self.punctualTool = PointMapTool(self.canvas)
        self.punctualTool.snapClicked.connect(self.display_punctual)

        # variables utilisees dans le code
        self.actions = {}

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('APNCad', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            key_action,
            toolbar=None,
            toolbutton=None,
            menu=None,
            enabled_flag=False,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar, menu or .

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: () -> None

        :param toolbar: Toolbar where the action will be added
        :type toolbar: QToolBar

        :param toolbutton: ToolButton where the action will be added
        :type toolbutton: QToolButton

        :param menu: Menu where the action will be added
        :type menu: QMenu

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if toolbar is not None:
            toolbar.addAction(action)

        if toolbutton is not None:
            toolbutton.menu().addAction(action)

        if menu is not None:
            self.iface.mainWindow().menuBar().insertMenu(self.iface.firstRightStandardMenu().menuAction(), menu)
            menu.addAction(action)

        self.actions[key_action] = action

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Plugin Menu
        self.menu = QMenu(self.iface.mainWindow())
        self.menu.setObjectName("mAPNMenu")
        self.menu.setTitle("Préparation Delim")
        self.iface.mainWindow().menuBar().insertMenu(self.iface.firstRightStandardMenu().menuAction(), self.menu)

        # choix SCR et enregistrer sous
        icon_path = ':/APNCad/icon/icon34.png'
        self.add_action(
            icon_path,
            text=self.tr('Choisir un SCR'),
            callback=self.set_crs,
            menu=self.menu,
            enabled_flag=True,
            key_action="action_choice_scr",
            parent=self.iface.mainWindow())

        # action generer couche pour nouveau projet (menu uniquement)
        icon_path = ':/APNCad/icon/icon33.png'
        self.add_action(
            icon_path,
            text=self.tr('Générer les couches'),
            callback=self.generate_layers,
            menu=self.menu,
            key_action="action_generate_layer",
            parent=self.iface.mainWindow())

        # action reconstruire projet (menu uniquement)
        icon_path = ':/APNCad/icon/icon44.png'
        self.add_action(
            icon_path,
            text=self.tr('Reconstruire le projet'),
            callback=self.build_project,
            menu=self.menu,
            enabled_flag=True,
            key_action="action_rebuild_project",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar general
        self.generalToolbar = self.iface.addToolBar("APNCad Général")
        self.generalToolbar.setObjectName("mGeneralToolBar")

        # Widget bouton start
        self.startButt = QPushButton(self.iface.mainWindow())
        self.startButt.setFixedWidth(80)
        self.startButt.setFixedHeight(20)
        self.startButt.setText("START")
        self.rightClicWidget = self.generalToolbar.addWidget(self.startButt)
        self.rightClicWidget.setToolTip(self.tr('Start'))
        self.startButt.clicked.connect(self.start_function)

        # Bouton deroulant couche
        self.coucheButton = QToolButton()
        self.coucheButton.setMenu(QMenu())
        self.coucheButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.generalToolbar.addWidget(self.coucheButton)

        # Bouton afficher panneau couche
        icon_path = ':/APNCad/icon/icon28.png'
        self.add_action(
            icon_path,
            text=self.tr('Ouvrir/Fermer le panneau Couches'),
            toolbutton=self.coucheButton,
            callback=self.panneau_couche,
            key_action="action_display_panel",
            parent=self.iface.mainWindow())

        self.coucheButton.setDefaultAction(self.actions["action_display_panel"])  # action par default du bouton

        # Bouton identifier couche
        icon_path = ':/APNCad/icon/icon29.png'
        self.add_action(
            icon_path,
            text=self.tr("Identifier la couche d'un objet"),
            toolbutton=self.coucheButton,
            callback=self.set_identifyLayer_tool,
            key_action="action_identify_layer",
            parent=self.iface.mainWindow())

        # Bouton deroulant visu couche
        self.visuButton = QToolButton()
        self.visuButton.setMenu(QMenu())
        self.visuButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.generalToolbar.addWidget(self.visuButton)

        # Bouton visu couche text CroqRem
        icon_path = ':/APNCad/icon/icon50.png'
        self.add_action(
            icon_path,
            text=self.tr('Afficher/cacher texte CroqRem'),
            toolbutton=self.visuButton,
            callback=self.visu_textCroqRem,
            key_action="action_display_croqrem",
            parent=self.iface.mainWindow())

        self.visuButton.setDefaultAction(self.actions["action_display_croqrem"])  # action par default du bouton

        # Bouton visu couche ortho
        icon_path = ':/APNCad/icon/icon51.png'
        self.add_action(
            icon_path,
            text=self.tr('Afficher/cacher Ortho'),
            toolbutton=self.visuButton,
            callback=self.visu_Ortho,
            key_action="action_display_ortho",
            parent=self.iface.mainWindow())

        # Bouton geler couche
        icon_path = ':/APNCad/icon/icon57.png'
        self.add_action(
            icon_path,
            text=self.tr("Geler la couche d'un objet"),
            toolbutton=self.visuButton,
            callback=self.set_freezeLayer_tool,
            key_action="action_freeze",
            parent=self.iface.mainWindow())

        # Bouton deroulant translation
        self.translationButton = QToolButton()
        self.translationButton.setMenu(QMenu())
        self.translationButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.generalToolbar.addWidget(self.translationButton)

        # Bouton translater feature
        icon_path = ':/APNCad/icon/icon31.png'
        self.add_action(
            icon_path,
            text=self.tr("Déplacer l'entité"),
            toolbutton=self.translationButton,
            callback=self.set_translation_tool,
            key_action="action_move",
            parent=self.iface.mainWindow())

        self.translationButton.setDefaultAction(self.actions["action_move"])  # action par default du bouton

        # Bouton copier translater feature
        icon_path = ':/APNCad/icon/icon32.png'
        self.add_action(
            icon_path,
            text=self.tr('Copier et déplacer les entités'),
            toolbutton=self.translationButton,
            callback=self.set_copy_tool,
            key_action="action_copy",
            parent=self.iface.mainWindow())

        # Bouton delete object
        icon_path = ':/APNCad/icon/icon9.png'
        self.add_action(
            icon_path,
            text=self.tr('Supprimer des entités'),
            callback=self.set_delete_tool,
            toolbar=self.generalToolbar,
            key_action="action_delete",
            parent=self.iface.mainWindow())

        # Bouton edit object attribute
        icon_path = ':/APNCad/icon/icon10.png'
        self.add_action(
            icon_path,
            text=self.tr("Editer l'attribut d'une entité"),
            callback=self.set_edit_tool,
            toolbar=self.generalToolbar,
            key_action="action_edit",
            parent=self.iface.mainWindow())

        # bouton sauvegarder toutes les couches
        icon_path = ':/APNCad/icon/icon3.png'
        self.add_action(
            icon_path,
            text=self.tr('Sauvegarde les couches en mode édition'),
            callback=self.save_layers,
            toolbar=self.generalToolbar,
            key_action="action_save",
            parent=self.iface.mainWindow())

        # bouton rechercher parcelle
        icon_path = ':/APNCad/icon/icon43.png'
        self.add_action(
            icon_path,
            text=self.tr('Rechercher une parcelle'),
            callback=self.rechercher_parc,
            toolbar=self.generalToolbar,
            key_action="action_search_parcel",
            parent=self.iface.mainWindow())

        # bouton action
        icon_path = ':/APNCad/icon/icon59.png'
        self.add_action(
            icon_path,
            text=self.tr("Exécute l'action d'entité"),
            callback=self.set_action_tool,
            toolbar=self.generalToolbar,
            key_action="action_run_action",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar Point
        self.pointToolbar = self.iface.addToolBar("APNCad Point")
        self.pointToolbar.setObjectName("mPointToolBar")

        # Widget toolbar texte dernier point
        self.lastPoint = QLineEdit(self.iface.mainWindow())
        self.lastPoint.setFixedWidth(80)
        self.lastPoint.setReadOnly(True)
        self.lastPointWidget = self.pointToolbar.addWidget(self.lastPoint)
        self.lastPointWidget.setToolTip(self.tr('Numéro point'))

        # Bouton deroulant point
        self.pointButton = QToolButton()
        self.pointButton.setMenu(QMenu())
        self.pointButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.pointToolbar.addWidget(self.pointButton)

        # Bouton tracer point
        icon_path = ':/APNCad/icon/icon.png'  # nom tel que defini dans le fichier qrc
        self.add_action(
            icon_path,
            text=self.tr(u'Tracer Point'),
            toolbutton=self.pointButton,
            callback=self.set_point_tool,
            key_action="action_draw_point",
            parent=self.iface.mainWindow())

        self.pointButton.setDefaultAction(self.actions["action_draw_point"])  # action par default du bouton

        # Bouton configurer les points
        icon_path = ':/APNCad/icon/icon2.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Configurer points'),
            toolbutton=self.pointButton,
            callback=self.config_point,
            key_action="action_config_point",
            parent=self.iface.mainWindow())

        # bouton ouvrir table attribut couche Point
        icon_path = ':/APNCad/icon/icon58.png'
        self.add_action(
            icon_path,
            text=self.tr("Ouvrir la table d'attributs de Point"),
            toolbutton=self.pointButton,
            callback=self.open_attribute_table,
            key_action="action_open_table_point",
            parent=self.iface.mainWindow())

        # bouton annuler dernier point
        icon_path = ':/APNCad/icon/icon7.png'
        self.add_action(
            icon_path,
            text=self.tr('Annuler'),
            callback=self.cancel,
            toolbar=self.pointToolbar,
            key_action="action_cancel_point",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar Dessin
        self.dessinToolbar = self.iface.addToolBar("APNCad Dessin")
        self.dessinToolbar.setObjectName("mDessinToolBar")

        # Bouton deroulant cote
        self.coteButton = QToolButton()
        self.coteButton.setMenu(QMenu())
        self.coteButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.dessinToolbar.addWidget(self.coteButton)

        # bouton coteSurLigne
        icon_path = ':/APNCad/icon/icon12.png'
        self.add_action(
            icon_path,
            text=self.tr('Cote sur ligne'),
            toolbutton=self.coteButton,
            callback=lambda: self.set_general_tool("coteSURLigne", self.coteButton, "action_cote_sur_ligne", True, 2),
            key_action="action_cote_sur_ligne",
            parent=self.iface.mainWindow())

        self.coteButton.setDefaultAction(self.actions["action_cote_sur_ligne"])  # action par default du bouton

        # bouton coteSansLigne
        icon_path = ':/APNCad/icon/icon11.png'
        self.add_action(
            icon_path,
            text=self.tr('Cote sans ligne'),
            toolbutton=self.coteButton,
            callback=lambda: self.set_general_tool("cotesansligne", self.coteButton, "action_cote_sans_ligne", True, 2),
            key_action="action_cote_sans_ligne",
            parent=self.iface.mainWindow())

        # bouton cote courbe
        icon_path = ':/APNCad/icon/icon13.png'
        self.add_action(
            icon_path,
            text=self.tr('Cote courbe'),
            toolbutton=self.coteButton,
            callback=self.set_coteCourbe_tool,
            key_action="action_cote_courbe",
            parent=self.iface.mainWindow())

        # bouton cote repere
        icon_path = ':/APNCad/icon/icon47.png'
        self.add_action(
            icon_path,
            text=self.tr('Cote repère'),
            toolbutton=self.coteButton,
            callback=lambda: self.set_general_tool("Coterepere", self.coteButton, "action_cote_repere", True, 3),
            key_action="action_cote_repere",
            parent=self.iface.mainWindow())

        # Bouton deroulant ligne
        self.ligneButton = QToolButton()
        self.ligneButton.setMenu(QMenu())
        self.ligneButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.dessinToolbar.addWidget(self.ligneButton)

        # bouton ligne continue
        icon_path = ':/APNCad/icon/icon14.png'
        self.add_action(
            icon_path,
            text=self.tr('Ligne continue'),
            toolbutton=self.ligneButton,
            callback=lambda: self.set_general_tool("LigneContinue",
                                                   self.ligneButton, "action_ligne_continue", False, 100),
            key_action="action_ligne_continue",
            parent=self.iface.mainWindow())

        self.ligneButton.setDefaultAction(self.actions["action_ligne_continue"])  # action par default du bouton

        # bouton ligne discontinue
        icon_path = ':/APNCad/icon/icon15.png'
        self.add_action(
            icon_path,
            text=self.tr('Ligne discontinue'),
            toolbutton=self.ligneButton,
            callback=lambda: self.set_general_tool("LigneDiscontinue",
                                                   self.ligneButton, "action_ligne_discontinue", False, 100),
            key_action="action_ligne_discontinue",
            parent=self.iface.mainWindow())

        # bouton trottoir
        icon_path = ':/APNCad/icon/icon55.png'
        self.add_action(
            icon_path,
            text=self.tr('Trottoir'),
            toolbutton=self.ligneButton,
            callback=lambda: self.set_general_tool("trottoir", self.ligneButton, "action_trottoir", False, 100),
            key_action="action_trottoir",
            parent=self.iface.mainWindow())

        # Bouton deroulant mur dessin
        self.murButton = QToolButton()
        self.murButton.setMenu(QMenu())
        self.murButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.dessinToolbar.addWidget(self.murButton)

        # bouton Mur Droite
        icon_path = ':/APNCad/icon/icon16.png'
        self.add_action(
            icon_path,
            text=self.tr('Mur à droite'),
            toolbutton=self.murButton,
            callback=lambda: self.set_general_tool("MurDroite", self.murButton,  "action_mur_droite", True, 100),
            key_action="action_mur_droite",
            parent=self.iface.mainWindow())

        self.murButton.setDefaultAction(self.actions["action_mur_droite"])  # action par default du bouton

        # bouton Mur Milieu
        icon_path = ':/APNCad/icon/icon17.png'
        self.add_action(
            icon_path,
            text=self.tr('Mur au milieu'),
            toolbutton=self.murButton,
            callback=lambda: self.set_general_tool("MurMilieu", self.murButton, "action_mur_milieu", True, 100),
            key_action="action_mur_milieu",
            parent=self.iface.mainWindow())

        # Bouton deroulant texte
        self.texteButton = QToolButton()
        self.texteButton.setMenu(QMenu())
        self.texteButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.dessinToolbar.addWidget(self.texteButton)

        # bouton Texte
        icon_path = ':/APNCad/icon/icon18.png'
        self.add_action(
            icon_path,
            text=self.tr('Texte'),
            toolbutton=self.texteButton,
            callback=lambda: self.set_general_tool("Texte", self.texteButton, "action_texte", True),
            key_action="action_texte",
            parent=self.iface.mainWindow())

        self.texteButton.setDefaultAction(self.actions["action_texte"])  # action par default du bouton

        # bouton TexteOriente
        icon_path = ':/APNCad/icon/icon19.png'
        self.add_action(
            icon_path,
            text=self.tr('Texte orienté'),
            toolbutton=self.texteButton,
            callback=lambda: self.set_general_tool("TexteOriente", self.texteButton, "action_texte_oriente", True, 2),
            key_action="action_texte_oriente",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar Symbole
        self.symboleToolbar = self.iface.addToolBar("APNCad Symbole")
        self.symboleToolbar.setObjectName("mSymboleToolBar")

        # Bouton deroulant mur symbole
        self.murMitButton = QToolButton()
        self.murMitButton.setMenu(QMenu())
        self.murMitButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.symboleToolbar.addWidget(self.murMitButton)

        # bouton mur mitoyen
        icon_path = ':/APNCad/icon/icon23.png'
        self.add_action(
            icon_path,
            text=self.tr('Mur mitoyen'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("murmitoyen", self.murMitButton, "action_mur_mitoyen", False, 2),
            key_action="action_mur_mitoyen",
            parent=self.iface.mainWindow())

        self.murMitButton.setDefaultAction(self.actions["action_mur_mitoyen"])  # action par default du bouton

        # bouton mur non mitoyen
        icon_path = ':/APNCad/icon/icon24.png'
        self.add_action(
            icon_path,
            text=self.tr('Mur NON mitoyen'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("murnonmi", self.murMitButton, "action_mur_nonmitoyen", False, 2),
            key_action="action_mur_nonmitoyen",
            parent=self.iface.mainWindow())

        # bouton cloture mit
        icon_path = ':/APNCad/icon/icon25.png'
        self.add_action(
            icon_path,
            text=self.tr('Clôture mitoyenne'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("clotureMit", self.murMitButton, "action_cloture_mit"),
            key_action="action_cloture_mit",
            parent=self.iface.mainWindow())

        # bouton cloture non mit
        icon_path = ':/APNCad/icon/icon35.png'
        self.add_action(
            icon_path,
            text=self.tr('Clôture NON mitoyenne'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("Cloturenonmit",
                                                   self.murMitButton, "action_cloture_nonmit", False, 2),
            key_action="action_cloture_nonmit",
            parent=self.iface.mainWindow())

        # bouton haie mit
        icon_path = ':/APNCad/icon/icon36.png'
        self.add_action(
            icon_path,
            text=self.tr("Haie mitoyenne"),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("Haiemit", self.murMitButton, "action_haie_mit", False, 2),
            key_action="action_haie_mit",
            parent=self.iface.mainWindow())

        # bouton haie non mit
        icon_path = ':/APNCad/icon/icon37.png'
        self.add_action(
            icon_path,
            text=self.tr('Haie NON mitoyenne'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("HaieNonMit", self.murMitButton, "action_haie_nonmit", False, 2),
            key_action="action_haie_nonmit",
            parent=self.iface.mainWindow())

        # bouton fosse mit
        icon_path = ':/APNCad/icon/icon38.png'
        self.add_action(
            icon_path,
            text=self.tr("Fossé mitoyen"),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("FosseMit", self.murMitButton, "action_fosse_mit", False, 2),
            key_action="action_fosse_mit",
            parent=self.iface.mainWindow())

        # bouton fosse non mit
        icon_path = ':/APNCad/icon/icon39.png'
        self.add_action(
            icon_path,
            text=self.tr('Fossé NON mitoyen'),
            toolbutton=self.murMitButton,
            callback=lambda: self.set_general_tool("Fossenonmit", self.murMitButton, "action_fosse_nonmit", False, 2),
            key_action="action_fosse_nonmit",
            parent=self.iface.mainWindow())

        # Bouton deroulant borne
        self.borneButton = QToolButton()
        self.borneButton.setMenu(QMenu())
        self.borneButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.symboleToolbar.addWidget(self.borneButton)

        # bouton borne
        icon_path = ':/APNCad/icon/icon21.png'
        self.add_action(
            icon_path,
            text=self.tr('Borne'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("borne", self.borneButton, "action_borne"),
            key_action="action_borne",
            parent=self.iface.mainWindow())

        self.borneButton.setDefaultAction(self.actions["action_borne"])  # action par default du bouton

        # bouton borne retrouvee
        icon_path = ':/APNCad/icon/icon22.png'
        self.add_action(
            icon_path,
            text=self.tr('Borne retrouvée'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("borne_retrouvee", self.borneButton, "action_borne_retrouvee"),
            key_action="action_borne_retrouvee",
            parent=self.iface.mainWindow())

        # bouton borne polygone
        icon_path = ':/APNCad/icon/icon40.png'
        self.add_action(
            icon_path,
            text=self.tr('Borne polygone'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("BornePolygo", self.borneButton, "action_borne_polygo", True),
            key_action="action_borne_polygo",
            parent=self.iface.mainWindow())

        # clou
        icon_path = ':/APNCad/icon/icon41.png'
        self.add_action(
            icon_path,
            text=self.tr('Clou'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("clou", self.borneButton, "action_clou", True),
            key_action="action_clou",
            parent=self.iface.mainWindow())

        # clou Limite
        icon_path = ':/APNCad/icon/icon42.png'
        self.add_action(
            icon_path,
            text=self.tr('Clou limite'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("clouLimite", self.borneButton, "action_clou_limite", False, 2),
            key_action="action_clou_limite",
            parent=self.iface.mainWindow())

        # croix gravee
        icon_path = ':/APNCad/icon/icon45.png'
        self.add_action(
            icon_path,
            text=self.tr('Croix gravée'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("CroixGravee", self.borneButton, "action_croix_gravee"),
            key_action="action_croix_gravee",
            parent=self.iface.mainWindow())

        # repere Nivellement
        icon_path = ':/APNCad/icon/icon46.png'
        self.add_action(
            icon_path,
            text=self.tr('Repère de Nivellement'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("RepereNivel", self.borneButton, "action_repere_nivel", True, 2),
            key_action="action_repere_nivel",
            parent=self.iface.mainWindow())

        # bouton puit
        icon_path = ':/APNCad/icon/icon53.png'
        self.add_action(
            icon_path,
            text=self.tr('Puit'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("puit", self.borneButton, "action_puit"),
            key_action="action_puit",
            parent=self.iface.mainWindow())

        # bouton ptDetail
        icon_path = ':/APNCad/icon/icon54.png'
        self.add_action(
            icon_path,
            text=self.tr('Point Détail'),
            toolbutton=self.borneButton,
            callback=lambda: self.set_general_tool("PtDetail", self.borneButton, "action_point_detail", True),
            key_action="action_point_detail",
            parent=self.iface.mainWindow())

        # Bouton deroulant piece jointe
        self.pjButton = QToolButton()
        self.pjButton.setMenu(QMenu())
        self.pjButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.symboleToolbar.addWidget(self.pjButton)

        # bouton image
        icon_path = ':/APNCad/icon/icon27.png'
        self.add_action(
            icon_path,
            text=self.tr('Image'),
            toolbutton=self.pjButton,
            callback=lambda: self.set_general_tool("image", self.pjButton, "action_image", True),
            key_action="action_image",
            parent=self.iface.mainWindow())

        self.pjButton.setDefaultAction(self.actions["action_image"])  # action par default du bouton

        # bouton Das
        icon_path = ':/APNCad/icon/icon52.png'
        self.add_action(
            icon_path,
            text=self.tr('Das'),
            toolbutton=self.pjButton,
            callback=self.set_das_tool,
            key_action="action_das",
            parent=self.iface.mainWindow())

        # bouton info
        icon_path = ':/APNCad/icon/icon56.png'
        self.add_action(
            icon_path,
            text=self.tr('Information'),
            toolbutton=self.pjButton,
            callback=self.set_info_tool,
            key_action="action_info",
            parent=self.iface.mainWindow())

        # bouton Debord de toit
        icon_path = ':/APNCad/icon/icon20.png'
        self.add_action(
            icon_path,
            text=self.tr('Débord de toit'),
            callback=self.set_debord_tool,
            toolbar=self.symboleToolbar,
            key_action="action_debord_toit",
            parent=self.iface.mainWindow())

        # bouton biffer
        icon_path = ':/APNCad/icon/icon26.png'
        self.add_action(
            icon_path,
            text=self.tr('Biffer'),
            callback=lambda: self.set_general_tool("biffer", attribute=False, nb_points_polyline=2),
            toolbar=self.symboleToolbar,
            key_action="action_biffer",
            parent=self.iface.mainWindow())

        # bouton polygone
        icon_path = ':/APNCad/icon/icon30.png'
        self.add_action(
            icon_path,
            text=self.tr('Polygone'),
            callback=self.set_polygone_tool,
            toolbar=self.symboleToolbar,
            key_action="action_polygone",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar CroquisDelim
        self.croquisToolbar = self.iface.addToolBar("APNCad CroquisDelim")
        self.croquisToolbar.setObjectName("mCroquisToolBar")

        # Widget toolbar lineedit dernier num parcelle
        self.lastNumParc = QLineEdit(self.iface.mainWindow())
        self.lastNumParc.setFixedWidth(80)
        self.lastNumParc.setReadOnly(True)
        self.lastNumParcWidget = self.croquisToolbar.addWidget(self.lastNumParc)
        self.lastNumParcWidget.setToolTip(self.tr('Numéro parcelle'))

        # Bouton deroulant num parcelle
        self.numParcButton = QToolButton()
        self.numParcButton.setMenu(QMenu())
        self.numParcButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.croquisToolbar.addWidget(self.numParcButton)

        # tracer num parc
        icon_path = ':/APNCad/icon/icon60.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tracer numéro de parcelle'),
            toolbutton=self.numParcButton,
            callback=self.set_numParc_tool,
            key_action="action_tracer_numparc",
            parent=self.iface.mainWindow())

        self.numParcButton.setDefaultAction(self.actions["action_tracer_numparc"])  # action par default du bouton

        # configurer num parc
        icon_path = ':/APNCad/icon/icon61.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Configurer numéros de parcelle'),
            toolbutton=self.numParcButton,
            callback=self.config_numParc,
            key_action="action_config_numparc",
            parent=self.iface.mainWindow())

        # bouton ouvrir table attribut couche Numparc
        icon_path = ':/APNCad/icon/icon62.png'
        self.add_action(
            icon_path,
            text=self.tr("Ouvrir la table d'attributs de Numparc"),
            toolbutton=self.numParcButton,
            callback=self.open_numParc_attribute_table,
            key_action="action_open_table_numparc",
            parent=self.iface.mainWindow())

        # bouton annuler dernier num parc
        icon_path = ':/APNCad/icon/icon63.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Annuler numéro de parcelle'),
            callback=self.cancel_numParc,
            toolbar=self.croquisToolbar,
            key_action="action_cancel_numparc",
            parent=self.iface.mainWindow())

        # Bouton deroulant fiscalite
        self.fiscButton = QToolButton()
        self.fiscButton.setMenu(QMenu())
        self.fiscButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.croquisToolbar.addWidget(self.fiscButton)

        # bouton fiscalite
        icon_path = ':/APNCad/icon/icon67.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Limite de subdivision fiscale'),
            toolbutton=self.fiscButton,
            callback=lambda: self.set_general_tool("Fiscalite", self.fiscButton, "action_fiscalite", False, 100),
            key_action="action_fiscalite",
            parent=self.iface.mainWindow())

        self.fiscButton.setDefaultAction(self.actions["action_fiscalite"])  # action par default du bouton

        # bouton FiscaliteTexte
        icon_path = ':/APNCad/icon/icon69.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Limite de subdivision fiscale'),
            toolbutton=self.fiscButton,
            callback=lambda: self.set_general_tool("FiscaliteTexte", self.fiscButton, "action_fiscalite_texte", True),
            key_action="action_fiscalite_texte",
            parent=self.iface.mainWindow())

        # bouton LimiteCommune
        icon_path = ':/APNCad/icon/icon64.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Limite de commune'),
            callback=lambda: self.set_general_tool("LimiteCommune", attribute=False, nb_points_polyline=100),
            toolbar=self.croquisToolbar,
            key_action="action_limite_commune",
            parent=self.iface.mainWindow())

        # bouton LimiteSection
        icon_path = ':/APNCad/icon/icon65.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Limite de section'),
            callback=lambda: self.set_general_tool("LimiteSection", attribute=False, nb_points_polyline=100),
            toolbar=self.croquisToolbar,
            key_action="action_limite_section",
            parent=self.iface.mainWindow())

        # bouton LimiteLieudit
        icon_path = ':/APNCad/icon/icon66.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Limite de lieu-dit'),
            callback=lambda: self.set_general_tool("LimiteLieuDit", attribute=False, nb_points_polyline=100),
            toolbar=self.croquisToolbar,
            key_action="action_limite_lieudit",
            parent=self.iface.mainWindow())

        # Bouton deroulant petit-grand texte
        self.dimTexteButton = QToolButton()
        self.dimTexteButton.setMenu(QMenu())
        self.dimTexteButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.croquisToolbar.addWidget(self.dimTexteButton)

        # bouton GrandTexte
        icon_path = ':/APNCad/icon/icon68.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tracer un grand texte'),
            toolbutton=self.dimTexteButton,
            callback=lambda: self.set_general_tool("GrandTexte", self.dimTexteButton, "action_grand_texte", True),
            key_action="action_grand_texte",
            parent=self.iface.mainWindow())

        self.dimTexteButton.setDefaultAction(self.actions["action_grand_texte"])

        # bouton PetitTexte
        icon_path = ':/APNCad/icon/icon70.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tracer un petit texte'),
            toolbutton=self.dimTexteButton,
            callback=lambda: self.set_general_tool("PetitText", self.dimTexteButton, "action_petit_texte", True),
            key_action="action_petit_texte",
            parent=self.iface.mainWindow())

        ################################################################################################################
        # Toolbar entree et zoom
        self.enterToolbar = self.iface.addToolBar("APNCad Navigation")
        self.enterToolbar.setObjectName("mNavigationToolBar")

        # Widget toolbar clic droit (stop trace polyligne)
        self.rightClic = QPushButton(self.iface.mainWindow())
        self.rightClic.setFixedWidth(151)
        self.rightClic.setFixedHeight(51)
        enterIcon = QIcon(':/APNCad/icon/icon4.png')
        self.rightClic.setIcon(enterIcon)
        self.rightClic.setText("CLIC DROIT")
        self.rightClicWidget = self.enterToolbar.addWidget(self.rightClic)
        self.rightClicWidget.setToolTip(self.tr('Clic droit'))
        self.rightClic.clicked.connect(self.clic_droit)

        # Widget toolbar touche echap
        self.toucheEchap = QPushButton(self.iface.mainWindow())
        self.toucheEchap.setFixedWidth(60)
        self.toucheEchap.setFixedHeight(51)
        self.toucheEchap.setText("Esc")
        self.toucheEchapWidget = self.enterToolbar.addWidget(self.toucheEchap)
        self.toucheEchapWidget.setToolTip(self.tr('Touche ECHAP'))
        self.toucheEchap.clicked.connect(self.appui_echap)

        # Widget toolbar zoom+
        self.bouttonZoomPlus = QPushButton(self.iface.mainWindow())
        self.bouttonZoomPlus.setFixedWidth(60)
        self.bouttonZoomPlus.setFixedHeight(51)
        zoomPlusIcon = QIcon(':/APNCad/icon/icon5.png')
        self.bouttonZoomPlus.setIcon(zoomPlusIcon)
        self.zoomPlusWidget = self.enterToolbar.addWidget(self.bouttonZoomPlus)
        self.zoomPlusWidget.setToolTip(self.tr('Zoom +'))
        self.bouttonZoomPlus.clicked.connect(self.zoom_plus)

        # Widget main
        self.bouttonMain = QPushButton(self.iface.mainWindow())
        self.bouttonMain.setFixedWidth(60)
        self.bouttonMain.setFixedHeight(51)
        mainIcon = QIcon(':/APNCad/icon/icon8.png')
        self.bouttonMain.setIcon(mainIcon)
        self.mainWidget = self.enterToolbar.addWidget(self.bouttonMain)
        self.mainWidget.setToolTip(self.tr('Se déplacer dans la carte'))
        self.bouttonMain.clicked.connect(self.outil_main)

        # Widget toolbar zoom-
        self.bouttonZoomMoins = QPushButton(self.iface.mainWindow())
        self.bouttonZoomMoins.setFixedWidth(60)
        self.bouttonZoomMoins.setFixedHeight(51)
        zoomMoinsIcon = QIcon(':/APNCad/icon/icon6.png')
        self.bouttonZoomMoins.setIcon(zoomMoinsIcon)
        self.zoomMoinsWidget = self.enterToolbar.addWidget(self.bouttonZoomMoins)
        self.zoomMoinsWidget.setToolTip(self.tr('Zoom -'))
        self.bouttonZoomMoins.clicked.connect(self.zoom_moins)

        # Widget toolbar tourner droite
        self.bouttonTournerDroite = QPushButton(self.iface.mainWindow())
        self.bouttonTournerDroite.setFixedWidth(30)
        self.bouttonTournerDroite.setFixedHeight(51)
        tournerDroiteIcon = QIcon(':/APNCad/icon/icon48.png')
        self.bouttonTournerDroite.setIcon(tournerDroiteIcon)
        self.tournerDroiteWidget = self.enterToolbar.addWidget(self.bouttonTournerDroite)
        self.tournerDroiteWidget.setToolTip(self.tr('Rotation droite'))
        self.bouttonTournerDroite.clicked.connect(self.make_tourner(10))

        # Widget toolbar tourner gauche
        self.bouttonTournerGauche = QPushButton(self.iface.mainWindow())
        self.bouttonTournerGauche.setFixedWidth(30)
        self.bouttonTournerGauche.setFixedHeight(51)
        tournerGaucheIcon = QIcon(':/APNCad/icon/icon49.png')
        self.bouttonTournerGauche.setIcon(tournerGaucheIcon)
        self.tournerGaucheWidget = self.enterToolbar.addWidget(self.bouttonTournerGauche)
        self.tournerGaucheWidget.setToolTip(self.tr('Rotation gauche'))
        self.bouttonTournerGauche.clicked.connect(self.make_tourner(-10))

        ################################################################################################################
        # Dialog configuration

        # clavier num
        self.dlgClavierNum = ClavierNumDialog()
        self.dlgClavierNum.setFixedSize(377, 324)
        self.dlgClavierNum.pushButton_0.clicked.connect(lambda: self.key_value("0"))
        self.dlgClavierNum.pushButton_1.clicked.connect(lambda: self.key_value("1"))
        self.dlgClavierNum.pushButton_2.clicked.connect(lambda: self.key_value("2"))
        self.dlgClavierNum.pushButton_3.clicked.connect(lambda: self.key_value("3"))
        self.dlgClavierNum.pushButton_4.clicked.connect(lambda: self.key_value("4"))
        self.dlgClavierNum.pushButton_5.clicked.connect(lambda: self.key_value("5"))
        self.dlgClavierNum.pushButton_6.clicked.connect(lambda: self.key_value("6"))
        self.dlgClavierNum.pushButton_7.clicked.connect(lambda: self.key_value("7"))
        self.dlgClavierNum.pushButton_8.clicked.connect(lambda: self.key_value("8"))
        self.dlgClavierNum.pushButton_9.clicked.connect(lambda: self.key_value("9"))
        self.dlgClavierNum.pushButton_coma.clicked.connect(lambda: self.key_value("."))
        self.dlgClavierNum.pushButton_del.clicked.connect(self.key_del)

        # parametre debordT
        self.debord = "0"
        self.dlgDebord = ChoisirDebordDialog()
        self.dlgDebord.setFixedSize(854, 155)
        self.dlgDebord.pushButton_0.clicked.connect(lambda: self.set_debord("0"))
        self.dlgDebord.pushButton_10.clicked.connect(lambda: self.set_debord("10"))
        self.dlgDebord.pushButton_20.clicked.connect(lambda: self.set_debord("20"))
        self.dlgDebord.pushButton_30.clicked.connect(lambda: self.set_debord("30"))
        self.dlgDebord.pushButton_40.clicked.connect(lambda: self.set_debord("40"))
        self.dlgDebord.pushButton_50.clicked.connect(lambda: self.set_debord("50"))
        self.dlgDebord.pushButton_60.clicked.connect(lambda: self.set_debord("60"))
        self.dlgDebord.pushButton_70.clicked.connect(lambda: self.set_debord("70"))
        self.dlgDebord.pushButton_80.clicked.connect(lambda: self.set_debord("80"))
        self.dlgDebord.pushButton_90.clicked.connect(lambda: self.set_debord("90"))

        self.dlgDebord.pushButton_clavier.clicked.connect(lambda: self.clavier_num(self.dlgDebord.lineedit_debord))

        # Fenetre entrer attribut (cote, modifier)
        self.dlgAttribut = EntrerAttributDialog()
        self.dlgAttribut.setFixedSize(430, 169)
        self.dlgAttribut.pushButton_clavier.clicked.connect(
            lambda: self.clavier_num(self.dlgAttribut.lineedit_attribut))
        self.dlgAttribut.pushButton_laser.clicked.connect(self.mesure_laser)
        # lecture des attributs dans fichier txt
        with open(os.path.join(self.plugin_dir, "attribut_texte.txt")) as file_txt:
            txt = file_txt.read()
        list_attributes = txt.split('\n')
        self.dlgAttribut.comboBox_texte.addItems(list_attributes)
        self.dlgAttribut.comboBox_texte.activated.connect(
            lambda: self.fill_from_combo(self.dlgAttribut.comboBox_texte, self.dlgAttribut.lineedit_attribut))
        self.dlgAttribut.comboBox_field.currentIndexChanged.connect(
            lambda: self.select_attribute_field(self.dlgAttribut.lineedit_attribut, self.dlgAttribut.comboBox_field))

        # Fenetre editer info
        self.dlgInfo = EditerInfoDialog()
        self.dlgInfo.setFixedSize(425, 276)

        # Fenetre editer image
        self.dlgImage = EditerImageDialog()
        self.dlgImage.setFixedSize(544, 136)
        self.dlgImage.pushButton_browse.clicked.connect(
            lambda: self.browse_file(self.dlgImage.lineedit_attribut, "Image files (*.jpg *.png);;PDF files (*.pdf)"))
        self.dlgImage.pushButton_picture.clicked.connect(self.open_camera)
        self.dlgImage.pushButton_clavier.clicked.connect(lambda: self.clavier_num(self.dlgImage.lineedit_attribut))
        self.dlgImage.comboBox_field.currentIndexChanged.connect(
            lambda: self.select_attribute_field(self.dlgImage.lineedit_attribut, self.dlgImage.comboBox_field))

        # Fenetre parametres point
        self.dlgConfigPt = ConfigPointsDialog()
        self.dlgConfigPt.setFixedSize(477, 141)  # empeche redimensionnement fenetre
        self.dlgConfigPt.pushButton_clavierNum.clicked.connect(
            lambda: self.clavier_num(self.dlgConfigPt.lineedit_numin))
        self.dlgConfigPt.pushButton_clavierInc.clicked.connect(lambda: self.clavier_num(self.dlgConfigPt.lineedit_inc))
        self.dlgConfigPt.button_resumeNum.clicked.connect(lambda: self.resume_num("point"))

        # Fenetre parametres num parc
        self.dlgNumParc = ConfigPointsDialog()
        self.dlgNumParc.setFixedSize(477, 141)  # empeche redimensionnement fenetre
        self.dlgNumParc.pushButton_clavierNum.clicked.connect(lambda: self.clavier_num(self.dlgNumParc.lineedit_numin))
        self.dlgNumParc.pushButton_clavierInc.clicked.connect(lambda: self.clavier_num(self.dlgNumParc.lineedit_inc))
        self.dlgNumParc.button_resumeNum.clicked.connect(lambda: self.resume_num("parcelle"))

        # Fenetre liste points
        self.dlgListe = ListePointDialog()
        self.dlgListe.setFixedSize(322, 352)

        # Fenetre liste points
        self.dlgListeParc = ListePointDialog()
        self.dlgListeParc.setFixedSize(322, 352)

        # Fenetre choix SCR
        self.dlgCrs = CrsDialog()
        self.dlgCrs.setFixedSize(453, 190)
        for key in self.crsDict.keys():
            self.dlgCrs.comboBox_crs.addItems([key])
        self.dlgCrs.lineEdit_path.setReadOnly(True)
        self.dlgCrs.pushButton_saveAs.clicked.connect(self.save_project)

        # Fenetre Camera (built here because QGIS cannot read QCameraViewfinder in ui)
        self.viewfinder = QCameraViewfinder()
        self.viewfinder.setFixedSize(934, 685)
        self.viewfinder.setWindowTitle("Appareil Photo")
        self.viewfinder.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False)
        # getting available cameras
        self.available_cameras = QCameraInfo.availableCameras()

        self.camera_toolbar = QToolBar("Camera Tool Bar", self.viewfinder)
        self.button_photo = QPushButton("Prendre photo")
        self.button_photo_browse = QPushButton("Parcourir...")
        self.lineedit_photo_path = QLineEdit("")
        self.lineedit_photo_path.setFixedWidth(350)

        self.camera_selector = QComboBox()
        # adding items to the combo box
        self.camera_selector.addItems([camera.description() for camera in self.available_cameras])

        self.button_close_cam = QPushButton("Quitter")
        self.camera_toolbar.addWidget(self.button_photo)
        self.camera_toolbar.addWidget(self.button_photo_browse)
        self.camera_toolbar.addWidget(self.lineedit_photo_path)
        self.camera_toolbar.addWidget(self.camera_selector)
        self.camera_toolbar.addWidget(self.button_close_cam)

        self.button_photo.clicked.connect(self.take_picture)
        self.button_photo_browse.clicked.connect(lambda: self.browse_folder(self.lineedit_photo_path))
        self.camera_selector.currentIndexChanged.connect(self.select_camera)
        self.button_close_cam.clicked.connect(self.close_camera)

        # Put the CRS window on the foreground when project saved
        self.iface.actionSaveProjectAs().triggered.connect(self.set_crs_on_top)

        # Fenetre mesure laser metre
        self.dlgLaser = LasermDialog()
        self.dlgLaser.setFixedSize(632, 178)
        self.dlgLaser.lineEdit_dist_horiz.setReadOnly(True)
        self.dlgLaser.lineEdit_dist.textChanged.connect(self.calcul_dist_horizon)

        # Fenetre recherche parcelle
        self.dlgParc = RechercheParcDialog()
        self.dlgParc.setFixedSize(463, 179)
        self.dlgParc.pushButton_clavierNum.clicked.connect(lambda: self.clavier_num(self.dlgParc.LineEdit_parc))

        # Fenetre suppression
        self.dlgNear = SelectFeatDialog()
        self.dlgNear.setFixedSize(546, 409)
        self.dlgNear.pushButton_select.clicked.connect(self.select_feat)

        # will be set False in config_point()
        self.first_start = True

    # remettre la fenetre au premier plan apres enregistrement
    def set_crs_on_top(self):
        if not self.dlgCrs.isHidden():
            self.dlgCrs.activateWindow()
            pathProj = QgsProject.instance().fileName()
            self.dlgCrs.lineEdit_path.setText(pathProj)

    # Choisir SCR
    def set_crs(self):
        self.dlgCrs.show()
        result = self.dlgCrs.exec_()

        if result:

            crs = self.crsDict[str(self.dlgCrs.comboBox_crs.currentText())]
            QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(crs))
            print(crs)
            # si le projet a été enregistré
            if QgsProject.instance().write():
                self.actions["action_generate_layer"].setEnabled(True)
            else:
                self.iface.messageBar().pushMessage(
                    "Le projet n'a pas été enregistré : impossible de créer les couches", level=Qgis.Critical,
                    duration=6)

    # Save project as
    def save_project(self):
        self.iface.actionSaveProjectAs().trigger()

    # Generer couches pour nouveau projet
    def generate_layers(self):
        # crs du projet
        crs = QgsProject.instance().crs().authid()

        # repertoire projet : il faut enregistrer le projet avant!
        pathProj = QFileInfo(QgsProject.instance().fileName()).absolutePath()

        # creation des groupes
        root = QgsProject.instance().layerTreeRoot()
        cad_dessin = root.addGroup("Cad_Dessin")  # groupe principal

        symbole = cad_dessin.addGroup("Symboles")
        dessin = cad_dessin.addGroup("Dessin")
        autre = cad_dessin.addGroup("Autres")
        croquisDelim = cad_dessin.addGroup("CroquisDelim")

        croqrem = root.addGroup("CroqRem")  # group croqrem
        restit = root.addGroup("Restit")
        ancienplan = root.addGroup("Ancien_Plan")
        ortho = root.addGroup("Ortho")

        print("crs: ", crs)
        print(pathProj)

        listLayersSorted = sorted(self.listLayers, key=lambda s: s[0].lower(), reverse=True)
        for couche in listLayersSorted:

            # Repertoire fichiers couche
            fn = pathProj + "/" + couche[0] + ".shp"

            # create fields
            layerFields = QgsFields()

            # type de l'ID (int pour Point uniquement)
            if couche[0] == "Point":
                layerFields.append(QgsField('ID', QVariant.Int))
            # elif couche[0]=="image":
            #     layerFields.append(QgsField('ID', QVariant.Image))
            elif couche[0] == "Das":
                layerFields.append(QgsField('ID', QVariant.String))
                layerFields.append(QgsField('Fichier', QVariant.String))
            else:
                layerFields.append(QgsField('ID', QVariant.String))

            # Creation des couches et d'un premier feature (obligatoire pour pouvoir ajouter des entites)
            if couche[1] == "Point":
                writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.Point,
                                             QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                feat = QgsFeature()
                feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(0, 0)))

            elif couche[1] == "Ligne":
                writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.LineString,
                                             QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                feat = QgsFeature()
                feat.setGeometry(QgsGeometry.fromPolyline([QgsPoint(0, 0), QgsPoint(1, 1)]))

            elif couche[1] == "Polygone":
                writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.Polygon,
                                             QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                feat = QgsFeature()
                feat.setGeometry(QgsGeometry.fromPolygonXY([[QgsPointXY(0, 0), QgsPointXY(1, 1), QgsPointXY(2, 2)]]))

            feat.setAttributes([1])
            writer.addFeature(feat)
            layer = self.iface.addVectorLayer(fn, '', 'ogr')
            del writer

            # On supprime l'entite fictive ajoutee
            layer.dataProvider().deleteFeatures([0])

            # On charge les styles
            success = layer.loadNamedStyle(self.plugin_dir + '/styles/' + couche[0] + '.qml')
            if not success[1]:
                self.iface.messageBar().pushMessage("Impossible de charger le style de la couche: " + couche[0],
                                                    level=Qgis.Critical, duration=3)

            # ajout dans un groupe
            root = QgsProject.instance().layerTreeRoot()
            layerT = root.findLayer(layer.id())
            parent = layerT.parent()

            if couche[2] == "Symbole":
                # ajout au groupe
                symbole.insertChildNode(0, QgsLayerTreeLayer(layer))

            elif couche[2] == "Dessin":
                # ajout au groupe
                dessin.insertChildNode(0, QgsLayerTreeLayer(layer))

            elif couche[2] == "Autre":
                # ajout au groupe
                autre.insertChildNode(0, QgsLayerTreeLayer(layer))

            elif couche[2] == "CroquisDelim":
                # ajout au groupe
                croquisDelim.insertChildNode(0, QgsLayerTreeLayer(layer))

            # suppression de la couche initiale
            parent.removeChildNode(layerT)

        # enable tools
        self.start_function()
        self.actions["action_generate_layer"].setEnabled(False)

    # Completer un projet existant avec des nouvelles couches
    def build_project(self):

        # crs du projet
        crs = QgsProject.instance().crs().authid()

        # repertoire projet
        pathProj = QFileInfo(QgsProject.instance().fileName()).absolutePath()

        # recuperation des groupes ou creation si inexistants
        root = QgsProject.instance().layerTreeRoot()
        cad_dessin = root.findGroup("Cad_Dessin")  # groupe principal
        if cad_dessin is None:
            cad_dessin = root.addGroup("Cad_Dessin")
            symbole = cad_dessin.addGroup("Symboles")
            dessin = cad_dessin.addGroup("Dessin")
            autre = cad_dessin.addGroup("Autres")
            croquisDelim = cad_dessin.addGroup("CroquisDelim")
        else:
            symbole = cad_dessin.findGroup("Symboles")
            dessin = cad_dessin.findGroup("Dessin")
            autre = cad_dessin.findGroup("Autres")
            croquisDelim = cad_dessin.findGroup("CroquisDelim")

        if symbole is None:
            symbole = cad_dessin.addGroup("Symboles")
        if dessin is None:
            dessin = cad_dessin.addGroup("Dessin")
        if autre is None:
            autre = cad_dessin.addGroup("Autres")
        if croquisDelim is None:
            croquisDelim = cad_dessin.addGroup("CroquisDelim")

        # nombre de couches ajoutees
        compteur = 0

        listLayersSorted = sorted(self.listLayers, key=lambda s: s[0].lower(), reverse=True)
        for couche in listLayersSorted:

            # si la couche n'existe pas
            if len(QgsProject.instance().mapLayersByName(couche[0])) == 0:

                if listdir(pathProj).count("Build_" + couche[0] + ".shp") == 0:
                    compteur += 1

                    # Repertoire fichiers couche
                    fn = pathProj + "/Build_" + couche[0] + ".shp"

                    # create fields
                    layerFields = QgsFields()

                    # type de l'ID (int pour Point uniquement)
                    if couche[0] == "Point":
                        layerFields.append(QgsField('ID', QVariant.Int))
                    elif couche[0] == "Das":
                        layerFields.append(QgsField('ID', QVariant.String))
                        layerFields.append(QgsField('Fichier', QVariant.String))
                    # elif couche[0]=="image":
                    #     layerFields.append(QgsField('ID', QVariant.Image))
                    else:
                        layerFields.append(QgsField('ID', QVariant.String))

                    # options = QgsVectorFileWriter.SaveVectorOptions()
                    # options.driverName = "ESRI Shapefile"
                    # options.fileEncoding='System'

                    # Creation des couches et d'un premier feature (obligatoire pour pouvoir ajouter des entites)
                    if couche[1] == "Point":
                        writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.Point,
                                                     QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                        feat = QgsFeature()
                        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(0, 0)))

                    elif couche[1] == "Ligne":
                        writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.LineString,
                                                     QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                        feat = QgsFeature()
                        feat.setGeometry(QgsGeometry.fromPolyline([QgsPoint(0, 0), QgsPoint(1, 1)]))

                    elif couche[1] == "Polygone":
                        writer = QgsVectorFileWriter(fn, 'System', layerFields, QgsWkbTypes.Polygon,
                                                     QgsCoordinateReferenceSystem(crs), 'ESRI Shapefile')
                        feat = QgsFeature()
                        feat.setGeometry(
                            QgsGeometry.fromPolygonXY([[QgsPointXY(0, 0), QgsPointXY(1, 1), QgsPointXY(2, 2)]]))

                    feat.setAttributes([1])
                    writer.addFeature(feat)
                    layer = self.iface.addVectorLayer(fn, '', 'ogr')
                    layer.setName(couche[0])
                    del writer

                    # On supprime l'entite fictive ajoutee
                    layer.dataProvider().deleteFeatures([0])

                    # On charge les styles
                    success = layer.loadNamedStyle(self.plugin_dir + '/styles/' + couche[0] + '.qml')
                    if not success[1]:
                        self.iface.messageBar().pushMessage("Impossible de charger le style de la couche: " + couche[0],
                                                            level=Qgis.Critical, duration=3)

                    # ajout dans un groupe
                    root = QgsProject.instance().layerTreeRoot()
                    layerT = root.findLayer(layer.id())
                    clone = layerT.clone()
                    parent = layerT.parent()

                    if couche[2] == "Symbole":
                        # ajout au groupe
                        symbole.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "Dessin":
                        # ajout au groupe
                        dessin.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "Autre":
                        # ajout au groupe
                        autre.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "CroquisDelim":
                        # ajout au groupe
                        croquisDelim.insertChildNode(0, QgsLayerTreeLayer(layer))

                    # suppression de la couche initiale
                    parent.removeChildNode(layerT)

                # le fichier build_shp existe deja (la couche a été manuellement renommée: on ne veut pas l'ecraser)
                else:
                    # Repertoire fichiers couche
                    fn = pathProj + "/Build_" + couche[0] + ".shp"
                    # Chargement couche
                    layer = self.iface.addVectorLayer(fn, '', 'ogr')
                    layer.setName(couche[0])

                    # On charge les styles
                    success = layer.loadNamedStyle(self.plugin_dir + '/styles/' + couche[0] + '.qml')
                    if not success[1]:
                        self.iface.messageBar().pushMessage("Impossible de charger le style de la couche : "
                                                            + couche[0], level=Qgis.Critical, duration=3)

                    # ajout dans un groupe
                    root = QgsProject.instance().layerTreeRoot()
                    layerT = root.findLayer(layer.id())
                    clone = layerT.clone()
                    parent = layerT.parent()

                    if couche[2] == "Symbole":
                        # ajout au groupe
                        symbole.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "Dessin":
                        # ajout au groupe
                        dessin.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "Autre":
                        # ajout au groupe
                        autre.insertChildNode(0, QgsLayerTreeLayer(layer))

                    elif couche[2] == "CroquisDelim":
                        # ajout au groupe
                        croquisDelim.insertChildNode(0, QgsLayerTreeLayer(layer))

                    # suppression de la couche initiale
                    parent.removeChildNode(layerT)

            # layer exist, only reload style
            else:
                layer = QgsProject.instance().mapLayersByName(couche[0])[0]
                success = layer.loadNamedStyle(self.plugin_dir + '/styles/' + couche[0] + '.qml')
                if not success[1]:
                    self.iface.messageBar().pushMessage("Impossible de charger le style de la couche : "
                                                        + couche[0], level=Qgis.Critical, duration=3)

        # enable tools
        self.start_function()
        self.iface.messageBar().pushMessage("La reconstruction a généré : " + str(compteur) + " couches",
                                            level=Qgis.Info, duration=4)

    # Bouton start
    def start_function(self):

        # dict containing every info about layers (layer instance, type, nb points,
        self.layers = {}
        for couche in self.listLayers:
            try:
                self.layers[couche[0]] = QgsProject.instance().mapLayersByName(couche[0])[0]
            except Exception as e:
                print(e)
                self.iface.messageBar().pushMessage("La couche {} n'existe pas".format(couche[0]), level=Qgis.Critical,
                                                    duration=3)

        self.currentLayer = self.iface.activeLayer()

        # initialisation widget texte dernier point
        # construit liste id points
        try:
            listFeatures = []
            for feature in self.layers['Point'].getFeatures():
                listFeatures.append(feature.id())

            self.numPoint = self.layers['Point'].getFeature(max(listFeatures)).attributes()[0] + 1
            self.lastPoint.setText(str(self.numPoint))
        except Exception as e:
            print(e)
            # si nouveau projet : aucun point ou si la couche n'existe pas
            self.lastPoint.setText(str(self.numPoint))

        # initialisation widget texte dernier num parc
        # construit liste id num parc
        try:
            listFeatures = []
            for feature in self.layers['Numparc'].getFeatures():
                listFeatures.append(feature.id())

            self.numParc = self.layers['Numparc'].getFeature(max(listFeatures)).attributes()[0] + 1
            self.lastNumParc.setText(str(self.numParc))
        except Exception as e:
            print(e)
            # si nouveau projet : aucun point ou si la couche n'existe pas
            self.lastNumParc.setText(str(self.numParc))

        # activer tous les boutons (sauf annuler pt et numParc)
        for i in self.actions.keys():
            if i != "action_cancel_point" and i != "action_generate_layer" and i != "action_cancel_numparc":
                self.actions[i].setEnabled(True)

        # desactiver bouton start
        self.startButt.setEnabled(False)

    # Tracer point
    def set_point_tool(self):
        self.currentLayer = self.layers['Point']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.pointTool)

    def display_point(self, point, button):

        feat = QgsFeature()
        feat.setAttributes([self.numPoint])
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])  # ajout du point sur le dessin #ne permet pas ctrl z

        self.currentLayer.commitChanges()

        # autoriser annulation
        self.actions["action_cancel_point"].setEnabled(True)

        # actualisation num suivant

        self.numPoint += self.increment
        self.lastPoint.setText(str(self.numPoint))

        self.refresh_layer(self.currentLayer)

    def config_point(self):

        # show the dialog
        self.dlgConfigPt.show()
        # select premiere zone de saisie
        self.dlgConfigPt.lineedit_numin.setFocus()
        # Run the dialog event loop
        result = self.dlgConfigPt.exec_()
        # See if OK was pressed
        if result:
            try:
                self.numPoint = int(self.dlgConfigPt.lineedit_numin.value())
            except Exception as e:
                print(e)
                pass
            try:
                inc = self.increment
                self.increment = int(self.dlgConfigPt.lineedit_inc.value())
                self.numPoint -= inc
                self.numPoint += self.increment

            except Exception as e:
                print(e)
                pass

            self.lastPoint.setText(str(self.numPoint))

        # efface le texte des lineEdit
        self.dlgConfigPt.lineedit_numin.clearValue()
        self.dlgConfigPt.lineedit_inc.clearValue()

    def open_attribute_table(self):
        self.iface.showAttributeTable(self.layers['Point'])

    # erase last displayed point
    def cancel(self):

        lastFeatureId = -1

        # Loop through all features in the layer
        for f in self.layers['Point'].getFeatures():
            if f.id() > lastFeatureId:
                lastFeatureId = f.id()

        if lastFeatureId >= 0:
            self.layers['Point'].dataProvider().deleteFeatures([lastFeatureId])
            self.refresh_layer(self.layers['Point'])
            self.numPoint = self.numPoint - self.increment
            self.lastPoint.setText(str(self.numPoint))

        # aucun point dans la couche
        else:
            self.actions["action_cancel_point"].setEnabled(False)

    # Tracer num parc
    def set_numParc_tool(self):
        self.currentLayer = self.layers['Numparc']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.numParcTool)

    def display_numParc(self, point, button):

        feat = QgsFeature()
        feat.setAttributes([self.numParc])
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])  # ajout du numParc sur le dessin #ne permet pas ctrl z

        self.currentLayer.commitChanges()

        # autoriser annulation
        self.actions["action_cancel_numparc"].setEnabled(True)

        # actualisation num suivant

        self.numParc += self.incParc
        self.lastNumParc.setText(str(self.numParc))

        self.refresh_layer(self.currentLayer)

    def config_numParc(self):
        self.dlgNumParc.show()
        self.dlgNumParc.lineedit_numin.setFocus()
        result = self.dlgNumParc.exec_()
        if result:
            try:
                self.numParc = int(self.dlgNumParc.lineedit_numin.value())
            except Exception as e:
                print(e)
                pass
            try:
                inc = self.incParc
                self.incParc = int(self.dlgNumParc.lineedit_inc.value())
                self.numParc -= inc
                self.numParc += self.incParc

            except Exception as e:
                print(e)
                pass
            self.lastNumParc.setText(str(self.numParc))

        # efface le texte des lineEdit
        self.dlgNumParc.lineedit_numin.clearValue()
        self.dlgNumParc.lineedit_inc.clearValue()

    def open_numParc_attribute_table(self):
        self.iface.showAttributeTable(self.layers['Numparc'])

    # erase last displayed point
    def cancel_numParc(self):

        lastFeatureId = -1

        # Loop through all features in the layer
        for f in self.layers['Numparc'].getFeatures():
            if f.id() > lastFeatureId:
                lastFeatureId = f.id()

        if lastFeatureId >= 0:
            self.layers['Numparc'].dataProvider().deleteFeatures([lastFeatureId])
            self.refresh_layer(self.layers['Numparc'])
            self.numParc = self.numParc - self.incParc
            self.lastNumParc.setText(str(self.numParc))

        # aucun numParc dans la couche
        else:
            self.actions["action_cancel_numparc"].setEnabled(False)

    def set_general_tool(self, layer_name,
                         button_menu=None,
                         default_action=None,
                         attribute=False,
                         nb_points_polyline=0):
        self.currentLayer = self.layers[layer_name]
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribute = attribute
        if nb_points_polyline == 0:
            self.canvas.setMapTool(self.punctualTool)
        else:
            self.canvas.setMapTool(self.polyligneTool)
            self.polyligneTool.nb_pts_poly = nb_points_polyline

        if button_menu is not None:
            button_menu.setDefaultAction(self.actions[default_action])

    def display_punctual(self, point, button):

        feat = QgsFeature()
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])  # ajout du point sur le dessin, ne permet pas ctrl z
        self.refresh_layer(self.currentLayer)
        self.currentLayer.commitChanges()

        if self.attribute:
            self.apply_new_attribute()

    def set_coteCourbe_tool(self):
        self.currentLayer = self.layers['coteSURLigne']
        self.attribute = True
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        # self.iface.actionAddFeature().trigger()
        self.canvas.setMapTool(self.arcTool)
        self.coteButton.setDefaultAction(self.actions["action_cote_courbe"])

    def display_cote_courbe(self, point, button):

        # 1er et 2e point
        if len(self.pointList) < 2:
            pt = QgsPoint(point.x(), point.y())
            self.pointList.append(pt)

        # 3e point
        else:

            # Create a QgsCircularString
            circularRing = QgsCircularString()
            # Set first point, intermediate point for curvature and end point
            circularRing.setPoints([
                self.pointList[0],
                self.pointList[1],
                QgsPoint(point.x(), point.y())]
            )

            # Create geometry using the instance of QgsCircularString
            geom_from_curve = QgsGeometry(circularRing)

            # Create a feature
            fet = QgsFeature()
            # Assign the geometry
            fet.setGeometry(geom_from_curve)

            self.currentLayer.dataProvider().addFeatures([fet])
            self.refresh_layer(self.currentLayer)
            self.pointList = []
            self.currentLayer.commitChanges()

            self.apply_new_attribute()

    def apply_new_attribute(self):

        if self.attribute:
            # get last feature
            # other option: feature = list(feature_iterator)[N - 1] to get Nth feature
            for feature in self.currentLayer.getFeatures():
                ft = feature

            # Special editing window for some layers (image)
            if self.currentLayer == self.layers['image'] or self.currentLayer == self.layers['Das']:
                dlg = self.dlgImage

            # General case for all other layers
            else:
                dlg = self.dlgAttribut

            # fenetre entrer cote
            dlg.show()
            dlg.lineedit_attribut.setFocus()
            dlg.comboBox_field.addItems([field.name() for field in self.currentLayer.fields()])

            result = dlg.exec_()
            # See if OK was pressed
            if result:
                try:
                    newValue = dlg.lineedit_attribut.value()
                    print(newValue)

                    index = dlg.comboBox_field.currentIndex()
                    attrs = {index: newValue}
                    self.currentLayer.dataProvider().changeAttributeValues({ft.id(): attrs})
                    self.refresh_layer(self.currentLayer)

                except Exception as e:
                    print(e)
                    pass
            else:
                self.currentLayer.dataProvider().deleteFeatures([ft.id()])
                self.refresh_layer(self.currentLayer)

            dlg.lineedit_attribut.clearValue()
            # signal must be blocked because clear triggers current index changed signal
            dlg.comboBox_field.blockSignals(True)
            dlg.comboBox_field.clear()
            dlg.comboBox_field.blockSignals(False)

    # valider polyligne
    def clic_droit(self):
        mouse_event = QMouseEvent(
            QMouseEvent.MouseButtonRelease,
            self.canvas.mapToGlobal(self.canvas.rect().center()),
            Qt.RightButton,
            Qt.RightButton,
            Qt.NoModifier,
        )
        self.canvas.mouseReleaseEvent(mouse_event)

    def appui_echap(self):

        self.pointList = []
        key_event = QKeyEvent(QKeyEvent.KeyPress, Qt.Key_Escape, Qt.NoModifier)
        self.canvas.keyPressEvent(key_event)

        # self.canvas.setMapTool(self.toolPan)

    def zoom_plus(self):
        self.canvas.zoomIn()

    def zoom_moins(self):
        self.canvas.zoomOut()

    def outil_main(self):
        self.canvas.setMapTool(self.toolPan)

    def make_tourner(self, degree):
        def tourner():
            rotation_actu = self.canvas.rotation()
            rotation_new = rotation_actu + degree
            self.canvas.setRotation(rotation_new)
            self.canvas.refresh()

        return tourner

    # suppression objet
    def set_delete_tool(self):
        self.canvas.setMapTool(self.deleteTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def delete_object(self, point, button):
        # self.dlgModif.reject() #ferme la fenetre
        self.save_layers()

        obj = self.find_nearest_features(point, button)

        if obj:
            self.currentLayer.dataProvider().deleteFeatures([self.closestFeatureId])
            self.currentLayer.removeSelection()
            self.refresh_layer(self.currentLayer)

    # Modify attributes
    def set_edit_tool(self):
        # self.dlg.reject()   #ferme la fenetre
        self.canvas.setMapTool(self.editAttributeTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def edit_attribute(self, point, button):
        self.save_layers()

        obj = self.find_nearest_features(point, button)
        if obj:

            # Special edit window for some layers (info)
            if self.currentLayer == self.layers['information']:
                self.dlgInfo.show()
                self.dlgInfo.textEdit.setFocus()
                try:
                    old_attr = self.currentLayer.selectedFeatures()[0].attributes()[0]
                    self.dlgInfo.textEdit.setText(str(old_attr))
                except Exception as e:
                    print(e)
                    pass

                result = self.dlgInfo.exec_()
                # See if OK was pressed
                if result:
                    try:
                        newValue = self.dlgInfo.textEdit.toPlainText()
                        attrs = {0: newValue}
                        self.currentLayer.dataProvider().changeAttributeValues({self.closestFeatureId: attrs})
                        self.refresh_layer(self.currentLayer)
                    except Exception as e:
                        print(e)
                        pass

                self.dlgInfo.textEdit.clear()

            # Image layer editing
            elif self.currentLayer == self.layers['image'] or self.currentLayer == self.layers['Das']:
                self.dlgImage.show()
                self.dlgImage.lineedit_attribut.setFocus()
                self.dlgImage.comboBox_field.addItems([field.name() for field in self.currentLayer.fields()])
                try:
                    old_attr = self.currentLayer.selectedFeatures()[0].attributes()[0]
                    self.dlgImage.lineedit_attribut.setText(str(old_attr))
                except Exception as e:
                    print(e)
                    pass

                result = self.dlgImage.exec_()
                # See if OK was pressed
                if result:
                    try:
                        index = self.dlgImage.comboBox_field.currentIndex()
                        newValue = self.dlgImage.lineedit_attribut.value()
                        attrs = {index: newValue}
                        self.currentLayer.dataProvider().changeAttributeValues({self.closestFeatureId: attrs})
                        self.refresh_layer(self.currentLayer)
                    except Exception as e:
                        print(e)
                        pass
                # efface le texte des lineEdit
                self.dlgImage.lineedit_attribut.clearValue()

                self.dlgImage.comboBox_field.blockSignals(True)
                self.dlgImage.comboBox_field.clear()
                self.dlgImage.comboBox_field.blockSignals(False)

            # All other layers
            else:
                self.dlgAttribut.show()
                self.dlgAttribut.lineedit_attribut.setFocus()
                self.dlgAttribut.comboBox_field.addItems([field.name() for field in self.currentLayer.fields()])

                try:
                    old_attr = self.currentLayer.selectedFeatures()[0].attributes()[0]
                    if old_attr != "NULL":
                        self.dlgAttribut.lineedit_attribut.setText(str(old_attr))
                except Exception as e:
                    print(e)
                    pass

                result = self.dlgAttribut.exec_()
                # See if OK was pressed
                if result:
                    try:
                        newValue = self.dlgAttribut.lineedit_attribut.value()
                        index = self.dlgAttribut.comboBox_field.currentIndex()
                        typeName = self.currentLayer.fields()[index].typeName()
                        if typeName == "Integer64" or typeName == "Integer":
                            newValue = int(newValue)

                        attrs = {index: newValue}
                        self.currentLayer.dataProvider().changeAttributeValues({self.closestFeatureId: attrs})
                        self.refresh_layer(self.currentLayer)
                    except Exception as e:
                        print(e)
                        pass
                # efface le texte des lineEdit
                self.dlgAttribut.lineedit_attribut.clearValue()
                self.dlgAttribut.comboBox_field.blockSignals(True)
                self.dlgAttribut.comboBox_field.clear()
                self.dlgAttribut.comboBox_field.blockSignals(False)

            self.currentLayer.removeSelection()

    def set_action_tool(self):
        self.canvas.setMapTool(self.actionTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def trigger_action(self, point, button):
        self.save_layers()

        obj = self.find_nearest_features(point, button)
        if obj:
            actionManager = self.currentLayer.actions()
            actions = actionManager.actions()
            if len(actions) > 0:
                actionManager.doActionFeature(actions[0].id(), self.currentLayer.selectedFeatures()[0])
            else:
                self.iface.messageBar().pushMessage("Cette couche ne possède pas d'action associée",
                                                    level=Qgis.Info, duration=4)
        self.currentLayer.removeSelection()

    def set_translation_tool(self):
        self.copy = False
        self.canvas.setMapTool(self.copyTool)
        self.save_layers()
        self.translationButton.setDefaultAction(self.actions["action_move"])

    def set_copy_tool(self):
        self.copy = True
        self.canvas.setMapTool(self.copyTool)
        self.save_layers()
        self.translationButton.setDefaultAction(self.actions["action_copy"])

    def translate_copy_feature(self, point, button):

        # 1er point
        if len(self.pointList) == 0:

            obj = self.find_nearest_features(point, button)
            if obj:
                pt = QgsPoint(point.x(), point.y())
                self.pointList.append(pt)
                print(self.currentLayer.name())
                # si on veut copier et translater
                if self.copy:
                    ft = self.currentLayer.getFeature(self.closestFeatureId)
                    self.currentLayer.dataProvider().addFeatures([ft])

        # 2e point
        else:

            feat = self.currentLayer.getFeature(self.closestFeatureId)

            geom = feat.geometry()
            dx = point.x() - self.pointList[0].x()
            dy = point.y() - self.pointList[0].y()
            geom.translate(dx, dy)
            self.currentLayer.dataProvider().changeGeometryValues({feat.id(): geom})
            self.refresh_layer(self.currentLayer)
            self.pointList = []
            self.currentLayer.commitChanges()
            self.currentLayer.removeSelection()

    def set_debord_tool(self):
        self.currentLayer = self.layers['debordT']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.debordTool)

        self.dlgDebord.show()
        self.dlgDebord.lineedit_debord.setFocus()

        result = self.dlgDebord.exec_()
        # See if OK was pressed
        if result:
            try:
                self.debord = self.dlgDebord.lineedit_debord.value()
            except Exception as e:
                print(e)
                pass
        self.dlgDebord.lineedit_debord.clearValue()
        self.dlgClavierNum.lineedit_valeur.clearValue()

    def set_debord(self, debord):
        self.debord = debord
        self.dlgDebord.reject()

    def display_debord(self, point, button):

        feat = QgsFeature()
        feat.setAttributes([self.debord])
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])  # ajout du point sur le dessin #ne permet pas ctrl z

        self.currentLayer.commitChanges()
        self.refresh_layer(self.currentLayer)

    def set_polygone_tool(self):
        self.currentLayer = self.layers['polygone']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.polygonTool)
        # self.iface.actionAddFeature().trigger()

    # Default tool (two fields)
    def set_das_tool(self):
        self.currentLayer = self.layers['Das']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()
        self.pjButton.setDefaultAction(self.actions["action_das"])

    # Default tool (bigger text field)
    def set_info_tool(self):
        self.currentLayer = self.layers['information']
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()
        self.pjButton.setDefaultAction(self.actions["action_info"])

    def browse_file(self, lineedit, file_filter):
        fname = QFileDialog.getOpenFileName(None, 'Ouvrir Fichier',
                                            QFileInfo(QgsProject.instance().fileName()).absolutePath(),
                                            file_filter)
        lineedit.setText(fname[0])

    def browse_folder(self, lineedit):
        path = QFileDialog.getExistingDirectory(None, "Choisir Dossier",
                                                QFileInfo(QgsProject.instance().fileName()).absolutePath())
        # if path is selected
        if path:
            lineedit.setText(path)

    def select_attribute_field(self, lineedit, combobox):
        index = combobox.currentIndex()
        feat = self.currentLayer.selectedFeatures()
        if len(feat) > 0:
            attributes = feat[0].attributes()
            old_attr = attributes[index]
            lineedit.setText(str(old_attr))

    def open_camera(self):

        # if no camera found
        if not self.available_cameras:
            self.iface.messageBar().pushMessage("Aucune caméra détectée",
                                                level=Qgis.Info, duration=4)
            return

        self.select_camera(0)
        self.save_path_image = QFileInfo(QgsProject.instance().fileName()).absolutePath()
        self.lineedit_photo_path.setText(self.save_path_image)

        self.viewfinder.show()

    def close_camera(self):
        self.camera.stop()
        self.viewfinder.close()

    def display_image(self):
        QDesktopServices.openUrl(QUrl("file:///" + self.captured_image_path))
        self.dlgImage.lineedit_attribut.setText(self.captured_image_path)
        self.close_camera()

    def take_picture(self):
        # time stamp
        timestamp = time.strftime("%d-%b-%Y-%H_%M_%S")

        self.save_path_image = self.lineedit_photo_path.text()
        # capture the image and save it on the save path
        self.captured_image_path = self.save_path_image + "/%s.jpg" % timestamp
        self.capture.capture(self.captured_image_path)

    # method to select camera
    def select_camera(self, i):

        # getting the selected camera
        self.camera = QCamera(self.available_cameras[i])

        # setting view finder to the camera
        self.camera.setViewfinder(self.viewfinder)

        # setting capture mode to the camera
        self.camera.setCaptureMode(QCamera.CaptureStillImage)

        # if any error occur show the alert
        self.camera.error.connect(
            lambda: self.iface.messageBar().pushMessage("Erreur lors de l'utilisation' de la caméra",
                                                        level=Qgis.Critical, duration=4))

        # start the camera
        self.camera.start()

        # creating a QCameraImageCapture object
        self.capture = QCameraImageCapture(self.camera)
        self.capture.imageSaved.connect(self.display_image)
        # showing alert if error occur
        self.capture.error.connect(
            lambda: self.iface.messageBar().pushMessage("Erreur lors de l'utilisation' de la caméra",
                                                        level=Qgis.Critical, duration=4))

        # when image captured showing message
        # self.capture.imageCaptured.connect(lambda d,
        #                                           i: self.status.showMessage("Image captured : "
        #                                                                      + str(self.save_seq)))

        # getting current camera name
        # self.current_camera_name = self.available_cameras[i].description()

    def clavier_num(self, lineedit):
        self.dlgClavierNum.show()

        result = self.dlgClavierNum.exec_()
        print(lineedit.value())
        # See if OK was pressed
        if result:
            txt = lineedit.value() + self.dlgClavierNum.lineedit_valeur.value()
            lineedit.setText(txt)
            self.dlgClavierNum.lineedit_valeur.clearValue()

    def key_value(self, key):
        value = self.dlgClavierNum.lineedit_valeur.value()
        self.dlgClavierNum.lineedit_valeur.setText(value + key)

    def key_del(self):
        value = self.dlgClavierNum.lineedit_valeur.value()
        self.dlgClavierNum.lineedit_valeur.setText(value[:-1])

    def fill_from_combo(self, combo, lineedit):
        text = combo.currentText()
        lineedit.setText(text)

    # identify the layer of a selected object
    def set_identifyLayer_tool(self):
        self.canvas.setMapTool(self.identifyTool)
        self.canvas.setCursor(QCursor(Qt.WhatsThisCursor))

    def identify_layer(self, point, button):

        self.save_layers()

        obj = self.find_nearest_features(point, button)

        if obj:
            iface.messageBar().pushMessage(self.currentLayer.name(), level=Qgis.Info, duration=5)

    def set_freezeLayer_tool(self):
        self.canvas.setMapTool(self.freezeTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def freeze_layer(self, point, button):
        self.save_layers()
        obj = self.find_nearest_features(point, button)
        if obj:
            QgsProject.instance().layerTreeRoot().findLayer(self.currentLayer.id()).setItemVisibilityChecked(False)

    # show/hide layer pannel
    def panneau_couche(self):
        for widget in iface.mainWindow().findChildren(QDockWidget):
            if widget.objectName() == 'Layers':
                if widget.isVisible():
                    widget.hide()  # hide()
                else:
                    widget.show()

    # montrer cacher texte croqrem
    def visu_textCroqRem(self):
        self.visuButton.setDefaultAction(self.actions["action_display_croqrem"])
        # Get layer Text in group CroqRem
        root = QgsProject.instance().layerTreeRoot()
        couche = None
        for lay in QgsProject.instance().mapLayersByName("Textes"):
            tree_layer = root.findLayer(lay.id())
            layer_parent = tree_layer.parent()
            if layer_parent.name() == "CroqRem":
                couche = tree_layer
                break
        if couche is None:
            return

        if couche.isVisible():
            couche.setItemVisibilityChecked(False)
        else:
            couche.setItemVisibilityChecked(True)

    # montrer cacher Ortho
    def visu_Ortho(self):
        self.visuButton.setDefaultAction(self.actions["action_display_ortho"])

        # Get layer Text in group Ortho
        root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup("Ortho")

        if group is None:
            return

        if group.isVisible():
            group.setItemVisibilityChecked(False)
        else:
            group.setItemVisibilityChecked(True)

    # Rechercher parcelle
    def rechercher_parc(self):

        # Get layer Polygones in group Ancien_Plan
        layer = None
        root = QgsProject.instance().layerTreeRoot()
        for lay in QgsProject.instance().mapLayersByName("Polygones"):
            tree_layer = root.findLayer(lay.id())
            layer_parent = tree_layer.parent()
            if layer_parent.name() == "Ancien_Plan":
                layer = lay
                break

        if layer is None:
            return

        self.iface.setActiveLayer(layer)
        layer.removeSelection()
        # self.iface.setActiveLayer(layer)
        self.dlgParc.show()
        self.dlgParc.LineEdit_section.setFocus()

        result = self.dlgParc.exec_()
        if result:
            section = self.dlgParc.LineEdit_section.value()
            parcelle = self.dlgParc.LineEdit_parc.value()

            # on complete eventuellement avec des 0
            parcelle = parcelle.zfill(4)

            num_parc = section.upper() + parcelle
            print(num_parc)
            parcelle_trouvee = False

            for feature in layer.getFeatures():
                if feature.attributes()[1] == "1PARCELLE":
                    # on recupere le code de la parcelle du feature
                    dict = json.loads(feature.attributes()[2])
                    num = dict["xdatas"]["IDU"]
                    if num[-6:] == num_parc:
                        print('num: ', num)
                        layer.select(feature.id())
                        self.canvas.zoomToSelected()
                        layer.removeSelection()
                        parcelle_trouvee = True

            if not parcelle_trouvee:
                iface.messageBar().pushMessage("Aucune parcelle trouvée, vérifier le numéro de section/parcelle",
                                               level=Qgis.Critical, duration=5)

        self.dlgParc.LineEdit_section.clearValue()
        self.dlgParc.LineEdit_parc.clearValue()

    # Prendre mesure laser metre
    def mesure_laser(self):
        self.dlgLaser.show()
        self.dlgLaser.lineEdit_dist.setFocus()

        result = self.dlgLaser.exec_()
        if result:
            try:
                # self.dist_laser=float(self.dlgLaser.label_dist_horiz.value())
                self.dlgAttribut.lineedit_attribut.setText(self.dlgLaser.lineEdit_dist_horiz.value())
                self.dlgAttribut.accept()
                self.dlgLaser.lineEdit_dist.clearValue()
                self.dlgLaser.lineEdit_dist_horiz.clearValue()

            except Exception as e:
                print(e)
                pass
        else:
            self.dlgAttribut.lineedit_attribut.setFocus()

    def calcul_dist_horizon(self):

        # len=0 signifie clearValue
        if len(self.dlgLaser.lineEdit_dist.value()) > 0:
            # detection valeur entierement recue grace au $ a la fin
            if self.dlgLaser.lineEdit_dist.value()[-1] == "$":
                print(self.dlgLaser.lineEdit_dist.value())
                print(self.dlgLaser.lineEdit_dist.value()[-1])
                try:
                    data = self.dlgLaser.lineEdit_dist.value()
                    data = data[:-1]
                    data = data.split(";")
                    dist = float(data[0])
                    angle = float(data[1])
                    dist_horizon = round(dist * Maths.cos(angle * Maths.pi / 180), 2)
                    self.dlgLaser.lineEdit_dist_horiz.setText(str(dist_horizon))
                    self.dlgLaser.lineEdit_dist.selectAll()
                except Exception as e:
                    print(e)
                    self.iface.messageBar().pushMessage("Mauvais format de données", level=Qgis.Critical, duration=3)
                    self.dlgLaser.lineEdit_dist.selectAll()

    # Compute the highest point attribute
    def max_Point(self):

        features = self.layers['Point'].getFeatures()
        attributs = []

        for feature in features:
            att = feature.attributes()
            attributs.append(int(att[0]))
        try:
            self.pointmax = max(attributs)
        except Exception as e:
            print(e)
            self.pointmax = 0

    def save_layers(self):
        # sauvegarde toutes les couches en mode edition
        for layer in self.iface.mapCanvas().layers():
            if layer.isEditable():
                layer.commitChanges()
                layer.startEditing()  # on remet la couche en mode edition

    def find_nearest_features(self, point, button):
        self.layerData = []

        for layer in self.canvas.layers():

            if layer.type() != QgsMapLayer.VectorLayer:
                # Ignore this layer as it's not a vector
                continue

            if layer.featureCount() == 0:
                # There are no features - skip
                continue

            # groupName = QgsProject.instance().layerTreeRoot().findLayer(layer.id()).parent().name()
            # features you cannot select
            # if groupName == "Restit" or groupName == "CroqRem" or groupName == "Ancien_Plan" or groupName == "Ortho":
            #     continue

            layer.removeSelection()

            shortestDistance = float("inf")
            self.closestFeatureId = -1

            # Loop through all features in the layer
            for f in layer.getFeatures():
                dist = f.geometry().distance(QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y())))
                if 1 > dist > 0:
                    info = (layer, f.id(), dist)
                    self.layerData.append(info)

        if not len(self.layerData) > 0:
            # Looks like no vector layers were found - do nothing
            self.iface.messageBar().pushMessage("Aucun objet trouvé", level=Qgis.Critical, duration=3)
            return False

        # Sort the layer information by shortest distance
        self.layerData.sort(key=lambda element: element[2])

        if len(self.layerData) > 1:
            self.dlgNear.tableWidget_closest.setRowCount(0)
            for i in range(len(self.layerData)):
                self.dlgNear.tableWidget_closest.insertRow(i)
                layer = self.layerData[i][0]
                id = self.layerData[i][1]
                dist = round(self.layerData[i][2], 2)

                line_id = QLineEdit(str(id))
                line_id.setReadOnly(True)

                line_layer = QLineEdit(layer.name())
                line_layer.setReadOnly(True)

                line_attribut = QLineEdit(str(layer.getFeature(id).attributes()[0]))
                line_attribut.setReadOnly(True)

                line_dist = QLineEdit(str(dist))
                line_dist.setReadOnly(True)

                self.dlgNear.tableWidget_closest.setCellWidget(i, 0, line_id)
                self.dlgNear.tableWidget_closest.setCellWidget(i, 1, line_layer)
                self.dlgNear.tableWidget_closest.setCellWidget(i, 2, line_attribut)
                self.dlgNear.tableWidget_closest.setCellWidget(i, 3, line_dist)

            self.dlgNear.show()
            result = self.dlgNear.exec_()
            if not result:
                return False

        else:

            layerWithClosestFeature, self.closestFeatureId, shortestDistance = self.layerData[0]
            layerWithClosestFeature.select(self.closestFeatureId)
            self.currentLayer = layerWithClosestFeature

        return True

    def select_feat(self):

        try:
            ligne = self.dlgNear.tableWidget_closest.selectionModel().selectedRows()[0].row()
            print(ligne)
            print(self.dlgNear.tableWidget_closest.cellWidget(ligne, 0))

            self.closestFeatureId = int(self.dlgNear.tableWidget_closest.cellWidget(ligne, 0).text())
            layerName = self.dlgNear.tableWidget_closest.cellWidget(ligne, 1).text()
            self.currentLayer = QgsProject.instance().mapLayersByName(layerName)[0]
            self.currentLayer.select(self.closestFeatureId)

            self.dlgNear.accept()

        except Exception as e:
            print(e)
            self.iface.messageBar().pushMessage("Aucun objet sélectionné", level=Qgis.Warning, duration=4)

    # refresh canvas
    def refresh_layer(self, layer):

        self.canvas.refresh()
        layer.triggerRepaint()

    def afficher_liste_point(self):

        self.dlgListe.show()

        # remplit liste de points

        listPoint = []
        listFeatures = []
        for feature in self.layers['Point'].getFeatures():
            listPoint.append(feature.attributes()[0])
            listFeatures.append(feature.id())
        listPoint.sort(reverse=True)

        self.dlgListe.listNumPoint.setRowCount(0)
        for i in range(len(listPoint)):
            self.dlgListe.listNumPoint.insertRow(i)
            self.dlgListe.listNumPoint.setCellWidget(i, 0, QLineEdit(str(listPoint[i])))

    def resume_num(self, tool):
        layer = None
        dlg = None
        if tool == "point":
            layer = self.layers['Point']
            dlg = self.dlgConfigPt
        elif tool == "parcelle":
            layer = self.layers['Numparc']
            dlg = self.dlgNumParc

        max_num = layer.maximumValue(0)
        if max_num is not None:
            dlg.lineedit_numin.clearValue()
            dlg.lineedit_numin.setText(str(max_num + 1))

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        self.menu.deleteLater()

        self.generalToolbar.clear()
        self.generalToolbar.deleteLater()

        self.pointToolbar.clear()
        self.pointToolbar.deleteLater()

        self.enterToolbar.clear()
        self.enterToolbar.deleteLater()

        self.dessinToolbar.clear()
        self.dessinToolbar.deleteLater()

        self.symboleToolbar.clear()
        self.symboleToolbar.deleteLater()

        self.croquisToolbar.clear()
        self.croquisToolbar.deleteLater()

        self.canvas.unsetMapTool(self.editAttributeTool)
        self.canvas.unsetMapTool(self.pointTool)
        self.canvas.unsetMapTool(self.deleteTool)
        self.canvas.unsetMapTool(self.arcTool)
        self.canvas.unsetMapTool(self.debordTool)
        self.canvas.unsetMapTool(self.identifyTool)
        self.canvas.unsetMapTool(self.copyTool)
        self.canvas.unsetMapTool(self.freezeTool)
        self.canvas.unsetMapTool(self.polyligneTool)
        self.canvas.unsetMapTool(self.punctualTool)
        self.canvas.unsetMapTool(self.actionTool)
        self.canvas.unsetMapTool(self.numParcTool)
